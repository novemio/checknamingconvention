apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group = publishedGroupId
version = libraryVersion

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/libs/checknamingconvention-$version"+".jar") // replace with your library name
            groupId this.group
            artifactId 'checknamingconvention' // replace with your library artifact id
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            repositories {
                maven {
                    url = "file://${buildDir}/repo"
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user") ?: System.getenv('BINTRAY_USER')
    key = properties.getProperty("bintray.apiKey") ?: System.getenv('BINTRAY_KEY')
    publications = ['Production']
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        // Default: false. Whether to run this as dry-run, without deploying
        dryRun = false
        // Default: false. Whether to override version artifacts already published
        override = false
        // Default: false. Whether version should be auto published after an upload
        publish = true
        publicDownloadNumbers = true
        version {
            name = this.version
            released = new Date()
            vcsTag = this.version
        }
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.srcDirs
//}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//artifacts {
////    archives javadocJar
//    archives sourcesJar
//}

